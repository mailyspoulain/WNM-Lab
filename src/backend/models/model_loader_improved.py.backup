import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import cv2
import os
import logging

# Configuration du logger
logger = logging.getLogger(__name__)

# ===================== CHARGEMENT DU MODÈLE =====================

def load_chest_xray_model(model_path=None):
    """
    Charge le modèle (DenseNet, VGG, ResNet) pour la détection de pneumonie.
    """
    try:
        possible_paths = [
            'backend/models/densenet121_chest_xray.pth',
            'backend/models/chest_xray_model.pth',
            'backend/models/vgg16-chest-4.pth'
        ]
        if model_path:
            possible_paths = [model_path] + possible_paths

        selected_path = None
        for path in possible_paths:
            if os.path.exists(path):
                selected_path = path
                logger.info(f"Modèle trouvé : {path}")
                break
        if not selected_path:
            logger.error("Aucun modèle trouvé.")
            return None, None, None

        # ----- PATCH DENSENET -----
        if "densenet" in selected_path:
            model = models.densenet121(weights=None)
            model.classifier = nn.Linear(1024, 2)
            state_dict = torch.load(selected_path, map_location='cpu')
            model.load_state_dict(state_dict)
        # ----- PATCH VGG16 -------
        elif "vgg16" in selected_path:
            model = models.vgg16(weights=None)
            model.classifier[6] = nn.Linear(4096, 2)
            state_dict = torch.load(selected_path, map_location='cpu')
            if 'model_state_dict' in state_dict:
                model.load_state_dict(state_dict['model_state_dict'])
            else:
                model.load_state_dict(state_dict)
        # ----- PATCH RESNET ------
        else:
            model = models.resnet18(weights=None)
            model.fc = nn.Linear(512, 2)
            state_dict = torch.load(selected_path, map_location='cpu')
            if 'model_state_dict' in state_dict:
                model.load_state_dict(state_dict['model_state_dict'])
            else:
                model.load_state_dict(state_dict)
        model.eval()
        transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])
        return model, transform, selected_path
    except Exception as e:
        logger.error(f"Erreur load_chest_xray_model : {e}")
        return None, None, None


# ===================== VALIDATION D'IMAGE =====================

class ChestXrayValidator:
    """Classe pour valider si une image est une radiographie thoracique"""
    
    @staticmethod
    def is_chest_xray(image_path):
        """
        Vérifier si l'image est une radiographie thoracique
        
        Args:
            image_path: Chemin vers l'image à valider
            
        Returns:
            tuple: (is_valid, details_dict)
        """
        try:
            # Charger l'image en niveaux de gris
            image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            if image is None:
                return False, {'confidence': 0, 'reason': 'Impossible de charger l\'image'}
            
            height, width = image.shape
            
            # Calculer les caractéristiques de l'image
            features = {
                'size_ratio': width / height if height > 0 else 0,
                'mean_intensity': np.mean(image),
                'std_intensity': np.std(image),
                'dark_pixels_ratio': np.sum(image < 50) / image.size,
                'bright_pixels_ratio': np.sum(image > 200) / image.size,
                'contrast': np.max(image) - np.min(image)
            }
            
            # Critères de validation
            is_valid = True
            reasons = []
            confidence_score = 1.0
            
            # 1. Ratio d'aspect (les radiographies sont généralement carrées ou légèrement rectangulaires)
            if features['size_ratio'] < 0.7 or features['size_ratio'] > 1.5:
                is_valid = False
                reasons.append('Ratio d\'aspect inhabituel')
                confidence_score *= 0.7
            
            # 2. Intensité moyenne (les radiographies ont des tons de gris moyens)
            if features['mean_intensity'] < 30 or features['mean_intensity'] > 220:
                is_valid = False
                reasons.append('Intensité moyenne inhabituelle')
                confidence_score *= 0.8
            
            # 3. Contraste (les radiographies ont un bon contraste)
            if features['std_intensity'] < 20:
                is_valid = False
                reasons.append('Contraste trop faible')
                confidence_score *= 0.8
            
            # 4. Distribution des pixels
            if features['dark_pixels_ratio'] > 0.8 or features['bright_pixels_ratio'] > 0.8:
                is_valid = False
                reasons.append('Distribution de pixels anormale')
                confidence_score *= 0.7
            
            # 5. Taille minimale
            if width < 100 or height < 100:
                is_valid = False
                reasons.append('Image trop petite')
                confidence_score *= 0.5
            
            confidence = max(0.1, confidence_score) if is_valid else max(0.05, confidence_score * 0.3)
            
            return is_valid, {
                'confidence': confidence,
                'reason': ' | '.join(reasons) if reasons else 'Image valide - semble être une radiographie',
                'features': features
            }
            
        except Exception as e:
            logger.error(f"Erreur validation: {str(e)}")
            return False, {'confidence': 0, 'reason': f'Erreur lors de la validation: {str(e)}'}


# ===================== PRÉTRAITEMENT =====================

def preprocess_xray_enhanced(image_path, target_size=(224, 224)):
    """
    Prétraitement amélioré pour les radiographies
    
    Args:
        image_path: Chemin vers l'image
        target_size: Taille cible (largeur, hauteur)
        
    Returns:
        PIL.Image: Image prétraitée
    """
    try:
        # Charger l'image
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError("Impossible de charger l'image")
        
        # Convertir en niveaux de gris si nécessaire
        if len(image.shape) == 3:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
            gray = image
        
        # 1. Amélioration du contraste avec CLAHE
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        enhanced = clahe.apply(gray)
        
        # 2. Débruitage
        denoised = cv2.bilateralFilter(enhanced, 9, 75, 75)
        
        # 3. Normalisation de l'histogramme
        normalized = cv2.normalize(denoised, None, 0, 255, cv2.NORM_MINMAX)
        
        # 4. Détection et suppression des bordures noires (optionnel)
        # Trouver la région d'intérêt
        _, binary = cv2.threshold(normalized, 20, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if contours:
            # Prendre le plus grand contour
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            
            # Ajouter une petite marge
            margin = 5
            x = max(0, x - margin)
            y = max(0, y - margin)
            w = min(normalized.shape[1] - x, w + 2 * margin)
            h = min(normalized.shape[0] - y, h + 2 * margin)
            
            # Recadrer si la zone est significative
            if w > normalized.shape[1] * 0.5 and h > normalized.shape[0] * 0.5:
                normalized = normalized[y:y+h, x:x+w]
        
        # 5. Redimensionner à la taille cible
        resized = cv2.resize(normalized, target_size, interpolation=cv2.INTER_CUBIC)
        
        # 6. Convertir en RGB pour le modèle
        rgb_image = cv2.cvtColor(resized, cv2.COLOR_GRAY2RGB)
        
        # 7. Convertir en PIL Image
        pil_image = Image.fromarray(rgb_image)
        
        return pil_image
        
    except Exception as e:
        logger.error(f"Erreur prétraitement: {str(e)}")
        # Fallback: charger directement l'image sans prétraitement
        try:
            return Image.open(image_path).convert('RGB')
        except:
            raise ValueError(f"Impossible de traiter l'image: {str(e)}")


# ===================== TEST TIME AUGMENTATION =====================

def predict_with_tta(model, image, transform, n_augmentations=5):
    """
    Test Time Augmentation pour améliorer la prédiction
    
    Args:
        model: Modèle PyTorch
        image: Image PIL
        transform: Transformation à appliquer
        n_augmentations: Nombre d'augmentations
        
    Returns:
        tuple: (probabilités moyennes, écarts-types)
    """
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    
    predictions = []
    
    # 1. Prédiction sur l'image originale
    with torch.no_grad():
        tensor = transform(image).unsqueeze(0).to(device)
        output = model(tensor)
        probs = torch.softmax(output, dim=1).cpu().numpy()
        predictions.append(probs)
    
    # 2. Prédictions avec augmentations
    augmentations = [
        transforms.RandomRotation(degrees=5),
        transforms.RandomHorizontalFlip(p=1),
        transforms.RandomAffine(degrees=0, translate=(0.05, 0.05)),
        transforms.ColorJitter(brightness=0.1, contrast=0.1),
        transforms.RandomPerspective(distortion_scale=0.1, p=1)
    ]
    
    for i, aug in enumerate(augmentations[:n_augmentations-1]):
        try:
            augmented = aug(image)
            with torch.no_grad():
                tensor = transform(augmented).unsqueeze(0).to(device)
                output = model(tensor)
                probs = torch.softmax(output, dim=1).cpu().numpy()
                predictions.append(probs)
        except Exception as e:
            logger.warning(f"Erreur TTA augmentation {i}: {str(e)}")
            continue
    
    # 3. Calculer la moyenne et l'écart-type
    predictions = np.array(predictions)
    mean_prediction = np.mean(predictions, axis=0)[0]
    std_prediction = np.std(predictions, axis=0)[0]
    
    return mean_prediction, std_prediction


# ===================== PRÉDICTION PRINCIPALE =====================

def predict_pneumonia_improved(model_info, image_path, 
                              use_validation=True, 
                              use_tta=True,
                              threshold=0.65,
                              min_confidence=0.2,
                              verbose=False):
    """
    Prédiction améliorée avec validation et TTA
    
    Args:
        model_info: tuple (model, transform, model_path)
        image_path: chemin vers l'image
        use_validation: valider si c'est une radiographie
        use_tta: utiliser Test Time Augmentation
        threshold: seuil de décision (défaut: 0.45)
        min_confidence: confiance minimale acceptable
        verbose: afficher les détails
    
    Returns:
        dict avec les résultats de la prédiction
    """
    try:
        # Vérifier que le modèle est chargé
        if model_info is None or model_info[0] is None:
            return {
                'prediction': 'Erreur',
                'probability': 0,
                'confidence': 0,
                'urgency': 'aucune',
                'recommendation': 'Modèle non chargé. Veuillez redémarrer l\'application.',
                'is_chest_xray': False,
                'details': {'error': 'Model not loaded'}
            }
        
        model, transform, _ = model_info
        
        # 1. Validation de l'image (si activée)
        is_valid = True
        validation_details = {'confidence': 1.0}
        
        if use_validation:
            is_valid, validation_details = ChestXrayValidator.is_chest_xray(image_path)
            if not is_valid:
                return {
                    'prediction': 'Image invalide',
                    'probability': 0,
                    'confidence': validation_details.get('confidence', 0),
                    'urgency': 'aucune',
                    'recommendation': f"Cette image ne semble pas être une radiographie thoracique. {validation_details.get('reason', '')}",
                    'is_chest_xray': False,
                    'details': validation_details
                }
        
        # 2. Prétraitement de l'image
        try:
            image = Image.open(image_path).convert('RGB')
        except Exception as e:
            logger.error(f"Erreur prétraitement, utilisation du chargement simple: {str(e)}")
            image = Image.open(image_path).convert('RGB')
        
        # 3. Prédiction
        if use_tta and model is not None:
            # Avec Test Time Augmentation
            probs, stds = predict_with_tta(model, image, transform)
            probability_pneumonia = float(probs[1])  # Classe 1 = Pneumonie
            uncertainty = float(stds[1])
            tta_consistency = 1 - min(uncertainty * 2, 1)  # Cohérence des prédictions
        else:
            # Sans TTA
            device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
            model = model.to(device)
            
            with torch.no_grad():
                tensor = transform(image).unsqueeze(0).to(device)
                output = model(tensor)
                probs = torch.softmax(output, dim=1).cpu().numpy()[0]
                probability_pneumonia = float(probs[1])
                tta_consistency = 1.0
                uncertainty = 0.0
        
        # 4. Calculer la confiance
        # La confiance dépend de plusieurs facteurs
        distance_from_threshold = abs(probability_pneumonia - threshold)
        prediction_confidence = min(1.0, distance_from_threshold * 3)  # Plus on est loin du seuil, plus on est confiant
        image_quality_confidence = validation_details.get('confidence', 1.0)
        
        # Confiance globale
        confidence = (prediction_confidence * 0.6 + 
                     image_quality_confidence * 0.2 + 
                     tta_consistency * 0.2)
        
        if verbose:
            logger.info(f"=== Détails de prédiction ===")
            logger.info(f"Image: {os.path.basename(image_path)}")
            logger.info(f"Probabilité pneumonie: {probability_pneumonia:.2%}")
            logger.info(f"Seuil utilisé: {threshold}")
            logger.info(f"Distance au seuil: {distance_from_threshold:.3f}")
            logger.info(f"Confiance prédiction: {prediction_confidence:.2%}")
            logger.info(f"Qualité image: {image_quality_confidence:.2%}")
            logger.info(f"Cohérence TTA: {tta_consistency:.2%}")
            logger.info(f"Confiance globale: {confidence:.2%}")
        
        # 5. Décision finale
        if probability_pneumonia > threshold:
            prediction = 'Pneumonie'
            
            # Déterminer l'urgence selon la probabilité
            if probability_pneumonia > 0.85:
                urgency = 'haute'
                recommendation = "⚠️ ALERTE: Forte probabilité de pneumonie détectée. Consultation médicale URGENTE recommandée."
            elif probability_pneumonia > 0.65:
                urgency = 'moyenne'
                recommendation = "⚠️ Probabilité significative de pneumonie. Consultation médicale recommandée dans les 24-48h."
            else:
                urgency = 'faible'
                recommendation = "Signes possibles de pneumonie. Surveillance recommandée. Consulter si symptômes persistent ou s'aggravent."
        else:
            prediction = 'Normal'
            urgency = 'aucune'
            if probability_pneumonia < 0.2:
                recommendation = "✅ Radiographie normale. Aucun signe de pneumonie détecté."
            else:
                recommendation = "✓ Radiographie probablement normale. Faible probabilité de pneumonie."
        
        # 6. Avertissements sur la confiance
        if confidence < min_confidence:
            recommendation += (
                f"\n\n⚠️ ATTENTION: Analyse peu fiable (confiance: {confidence:.1%}). "
                "Causes possibles: qualité d'image insuffisante, image atypique, ou résultats incohérents. "
                "Il est fortement recommandé de:\n"
                "• Refaire une radiographie de meilleure qualité\n"
                "• Consulter un radiologue pour confirmation"
            )
        elif confidence < 0.5:
            recommendation += (
                f"\n\n📌 Note: Confiance modérée ({confidence:.1%}). "
                "Une confirmation par un professionnel est conseillée."
            )
        
        # 7. Cas limite (proche du seuil)
        if abs(probability_pneumonia - threshold) < 0.1:
            recommendation += (
                f"\n\n📊 Résultat limite: probabilité {probability_pneumonia:.1%} (seuil: {threshold:.1%}). "
                "Le contexte clinique doit guider la décision finale."
            )
        
        # 8. Préparer le résultat final
        result = {
            'prediction': prediction,
            'probability': probability_pneumonia,
            'confidence': confidence,
            'urgency': urgency,
            'recommendation': recommendation,
            'threshold_used': threshold,
            'raw_probability': probability_pneumonia,
            'is_chest_xray': is_valid,
            'details': {
                'confidence': confidence,
                'image_quality_score': image_quality_confidence,
                'consistency_score': tta_consistency,
                'uncertainty': uncertainty,
                'prediction_confidence': prediction_confidence,
                'validation': validation_details if use_validation else {},
                'distance_from_threshold': distance_from_threshold
            }
        }
        
        return result
        
    except Exception as e:
        logger.error(f"Erreur lors de la prédiction: {str(e)}", exc_info=True)
        return {
            'prediction': 'Erreur',
            'probability': 0,
            'confidence': 0,
            'urgency': 'aucune',
            'recommendation': f'Erreur lors de l\'analyse: {str(e)}. Veuillez réessayer ou contacter le support.',
            'is_chest_xray': False,
            'details': {'error': str(e), 'error_type': type(e).__name__}
        }


# ===================== FONCTIONS UTILITAIRES =====================

def get_model_info(model_path=None):
    """
    Obtenir des informations sur le modèle chargé
    
    Returns:
        dict: Informations sur le modèle
    """
    try:
        model_info = load_chest_xray_model(model_path)
        if model_info[0] is None:
            return {'loaded': False, 'error': 'Model not found'}
        
        model, _, path = model_info
        
        # Compter les paramètres
        total_params = sum(p.numel() for p in model.parameters())
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        
        return {
            'loaded': True,
            'path': path,
            'architecture': 'ResNet18',
            'num_classes': 2,
            'classes': ['Normal', 'Pneumonie'],
            'total_parameters': total_params,
            'trainable_parameters': trainable_params,
            'device': 'cuda' if torch.cuda.is_available() else 'cpu'
        }
        
    except Exception as e:
        return {'loaded': False, 'error': str(e)}


# ===================== TEST DU MODULE =====================

if __name__ == "__main__":
    # Test du module
    print("Test du module model_loader_improved...")
    
    # 1. Test du chargement du modèle
    print("\n1. Chargement du modèle...")
    model_info = load_chest_xray_model()
    if model_info[0] is not None:
        print("✅ Modèle chargé avec succès!")
        info = get_model_info()
        print(f"   Architecture: {info['architecture']}")
        print(f"   Paramètres: {info['total_parameters']:,}")
    else:
        print("❌ Échec du chargement du modèle")
    
    # 2. Test de validation d'image (si une image test existe)
    test_image = "test_xray.jpg"
    if os.path.exists(test_image):
        print(f"\n2. Test de validation sur {test_image}...")
        is_valid, details = ChestXrayValidator.is_chest_xray(test_image)
        print(f"   Valide: {is_valid}")
        print(f"   Confiance: {details['confidence']:.2%}")
        print(f"   Raison: {details['reason']}")
    
    print("\n✅ Module prêt à l'emploi!")